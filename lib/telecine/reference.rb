module Telecine
  class ThreadHandleProxy
    def kill
      raise NotImplementedError, "remote kill not supported"
    end

    def join
      raise NotImplementedError, "remote join not supported"
    end
  end

  class FutureProxy < Celluloid::FutureProxy
    def initialize(mailbox)
      @mailbox = mailbox
      @klass = "[remote]"
    end
  end

  class AsyncProxy < Celluloid::AsyncProxy
    def initialize(mailbox)
      @mailbox = mailbox
      @klass = "[remote]"
    end
  end

  # The reference should:
  #   - be generated by the transport
  #   - contain a mailbox generated by the transport
  #   - use its mailbox to redirect messages to the transport
  #   - disallow certain invalid methods, like remote kill, or remote
  #     thread and class handles
  #
  # When creating sync calls, the caller attribute should be a serializable mailbox or mailbox proxy
  class Reference < Celluloid::ActorProxy
    def initialize(mailbox)
      @mailbox = mailbox
      @thread  = ThreadHandleProxy.new
      @klass   = "[remote]"

      @future_proxy = FutureProxy.new(mailbox)
      @async_proxy = AsyncProxy.new(mailbox)
    end
  end
end
